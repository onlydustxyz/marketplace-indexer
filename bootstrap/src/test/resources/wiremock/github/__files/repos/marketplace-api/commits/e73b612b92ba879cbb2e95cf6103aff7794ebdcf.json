{
    "sha": "e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
    "node_id": "C_kwDOKZwcvtoAKGU3M2I2MTJiOTJiYTg3OWNiYjJlOTVjZjYxMDNhZmY3Nzk0ZWJkY2Y",
    "commit": {
        "author": {
            "name": "Anthony Buisset",
            "email": "abuisset@gmail.com",
            "date": "2024-09-30T13:55:27Z"
        },
        "committer": {
            "name": "Anthony Buisset",
            "email": "abuisset@gmail.com",
            "date": "2024-09-30T13:55:27Z"
        },
        "message": "fix available and granted budgets",
        "tree": {
            "sha": "220d481010f8b076961123d0005484e2dbf76db0",
            "url": "https://api.github.com/repos/onlydustxyz/marketplace-api/git/trees/220d481010f8b076961123d0005484e2dbf76db0"
        },
        "url": "https://api.github.com/repos/onlydustxyz/marketplace-api/git/commits/e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
        "comment_count": 0,
        "verification": {
            "verified": true,
            "reason": "valid",
            "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEf2iRt5hVQQXKtppWNY4YwZLdMxsFAmb6rc8ACgkQNY4YwZLd\nMxt5ggv/Uj80C2fYvyPtTjBZRr+nDoab+Q91zp3EAKsOIwkxdKz0iSvpmiEbXLqb\nFu9HXwq5SpshmmgrYNr9LPx8rr4A9ULBPdcMzJJeM8Y4zqwgbXAxgSkwRe6fpYJ/\nfhOvL8K4e6nM+oZ9wMzayh+fltOQd5HElPFAWwsug4haKthIJhfZb1k/3VlNV4UZ\ncIaD5Nht8Xo3kYXNCLuW6u5Lp8X1GBM/zR/ax0odIqLCerRfLsnaqFIaPwR0ndVM\nSe46UlSR/Oh7FpTmi9zyNJSs/dd7LPxyaZ0QLWFPLm/DitgRiybayAqK9vTeSCFT\nEfeH5kWD5ozHVQxfMdMpb5eu0l/W7yZjvgKgBuOxxH+a6xz1bS4g3z8yNzzGmifh\nQ2DRbRZetAIL/kHuPd/sAAXHE6CM6H5WWlkmv65ojSm4zVSfQ3qC+WjPT6sFUk06\nsN2k0rFXuRIk0A2ltaA0kT5zMbLFVPC66f21thDYymJlCj3HJBdcS2NCPiG5pNmY\n9F2vLcoL\n=1wdr\n-----END PGP SIGNATURE-----",
            "payload": "tree 220d481010f8b076961123d0005484e2dbf76db0\nparent 135271155dae79c5f7c41e927062e36eebe70235\nauthor Anthony Buisset <abuisset@gmail.com> 1727704527 +0200\ncommitter Anthony Buisset <abuisset@gmail.com> 1727704527 +0200\n\nfix available and granted budgets\n"
        }
    },
    "url": "https://api.github.com/repos/onlydustxyz/marketplace-api/commits/e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
    "html_url": "https://github.com/onlydustxyz/marketplace-api/commit/e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
    "comments_url": "https://api.github.com/repos/onlydustxyz/marketplace-api/commits/e73b612b92ba879cbb2e95cf6103aff7794ebdcf/comments",
    "author": {
        "login": "AnthonyBuisset",
        "id": 43467246,
        "node_id": "MDQ6VXNlcjQzNDY3MjQ2",
        "avatar_url": "https://avatars.githubusercontent.com/u/43467246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AnthonyBuisset",
        "html_url": "https://github.com/AnthonyBuisset",
        "followers_url": "https://api.github.com/users/AnthonyBuisset/followers",
        "following_url": "https://api.github.com/users/AnthonyBuisset/following{/other_user}",
        "gists_url": "https://api.github.com/users/AnthonyBuisset/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AnthonyBuisset/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AnthonyBuisset/subscriptions",
        "organizations_url": "https://api.github.com/users/AnthonyBuisset/orgs",
        "repos_url": "https://api.github.com/users/AnthonyBuisset/repos",
        "events_url": "https://api.github.com/users/AnthonyBuisset/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AnthonyBuisset/received_events",
        "type": "User",
        "site_admin": false
    },
    "committer": {
        "login": "AnthonyBuisset",
        "id": 43467246,
        "node_id": "MDQ6VXNlcjQzNDY3MjQ2",
        "avatar_url": "https://avatars.githubusercontent.com/u/43467246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AnthonyBuisset",
        "html_url": "https://github.com/AnthonyBuisset",
        "followers_url": "https://api.github.com/users/AnthonyBuisset/followers",
        "following_url": "https://api.github.com/users/AnthonyBuisset/following{/other_user}",
        "gists_url": "https://api.github.com/users/AnthonyBuisset/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AnthonyBuisset/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AnthonyBuisset/subscriptions",
        "organizations_url": "https://api.github.com/users/AnthonyBuisset/orgs",
        "repos_url": "https://api.github.com/users/AnthonyBuisset/repos",
        "events_url": "https://api.github.com/users/AnthonyBuisset/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AnthonyBuisset/received_events",
        "type": "User",
        "site_admin": false
    },
    "parents": [
        {
            "sha": "135271155dae79c5f7c41e927062e36eebe70235",
            "url": "https://api.github.com/repos/onlydustxyz/marketplace-api/commits/135271155dae79c5f7c41e927062e36eebe70235",
            "html_url": "https://github.com/onlydustxyz/marketplace-api/commit/135271155dae79c5f7c41e927062e36eebe70235"
        }
    ],
    "stats": {
        "total": 148,
        "additions": 81,
        "deletions": 67
    },
    "files": [
        {
            "sha": "e223b0fc720421566832e079152353f36c03f822",
            "filename": "bootstrap/src/test/java/onlydust/com/marketplace/api/it/api/bi/ProjectDeepKpisApiIT.java",
            "status": "modified",
            "additions": 21,
            "deletions": 16,
            "changes": 37,
            "blob_url": "https://github.com/onlydustxyz/marketplace-api/blob/e73b612b92ba879cbb2e95cf6103aff7794ebdcf/bootstrap%2Fsrc%2Ftest%2Fjava%2Fonlydust%2Fcom%2Fmarketplace%2Fapi%2Fit%2Fapi%2Fbi%2FProjectDeepKpisApiIT.java",
            "raw_url": "https://github.com/onlydustxyz/marketplace-api/raw/e73b612b92ba879cbb2e95cf6103aff7794ebdcf/bootstrap%2Fsrc%2Ftest%2Fjava%2Fonlydust%2Fcom%2Fmarketplace%2Fapi%2Fit%2Fapi%2Fbi%2FProjectDeepKpisApiIT.java",
            "contents_url": "https://api.github.com/repos/onlydustxyz/marketplace-api/contents/bootstrap%2Fsrc%2Ftest%2Fjava%2Fonlydust%2Fcom%2Fmarketplace%2Fapi%2Fit%2Fapi%2Fbi%2FProjectDeepKpisApiIT.java?ref=e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
            "patch": "@@ -154,6 +154,12 @@ synchronized void setup() {\n             at(\"2021-02-10T00:00:00Z\", () -> rewardHelper.create(onlyDustId, pierre, abdel.githubUserId(), 5, STRK));\n \n             allProgramOrEcosystemIds = String.join(\",\", Stream.of(universe).map(UUID::toString).toList());\n+\n+            // Change the \"current\" usd quotes of STRK and ETH so that the available budget is affected\n+            currencyHelper.setQuote(\"2024-09-01T00:00:00Z\", STRK, USD, BigDecimal.valueOf(0.25));\n+            currencyHelper.setQuote(\"2024-09-01T00:00:00Z\", ETH, USD, BigDecimal.valueOf(3));\n+\n+            at(\"2024-09-02T00:00:00Z\", () -> accountingHelper.ungrant(madara, explorationTeam, 10, STRK));\n             projectFacadePort.refreshStats();\n         }\n \n@@ -171,7 +177,6 @@ public void should_get_projects_stats_between_dates() {\n                     .expectStatus()\n                     .is2xxSuccessful()\n                     .expectBody()\n-                    .consumeWith(System.out::println)\n                     .jsonPath(\"$.projects[0].project.name\").<String>value(name -> assertThat(name).contains(\"Bridge\"))\n                     .jsonPath(\"$.projects[1].project.name\").<String>value(name -> assertThat(name).contains(\"Madara\"))\n                     .jsonPath(\"$.projects[2].project.name\").<String>value(name -> assertThat(name).contains(\"OnlyDust\"))\n@@ -220,7 +225,7 @@ public void should_get_projects_stats_between_dates() {\n                                     }\n                                   ],\n                                   \"availableBudget\": {\n-                                    \"totalUsdEquivalent\": 2005.0,\n+                                    \"totalUsdEquivalent\": 3002.50,\n                                     \"totalPerCurrency\": [\n                                       {\n                                         \"amount\": 1000,\n@@ -232,7 +237,7 @@ public void should_get_projects_stats_between_dates() {\n                                           \"logoUrl\": null,\n                                           \"decimals\": 18\n                                         },\n-                                        \"usdEquivalent\": 2000,\n+                                        \"usdEquivalent\": 3000,\n                                         \"usdConversionRate\": null,\n                                         \"ratio\": null\n                                       },\n@@ -246,7 +251,7 @@ public void should_get_projects_stats_between_dates() {\n                                           \"logoUrl\": null,\n                                           \"decimals\": 18\n                                         },\n-                                        \"usdEquivalent\": 5.0,\n+                                        \"usdEquivalent\": 2.5,\n                                         \"usdConversionRate\": null,\n                                         \"ratio\": null\n                                       }\n@@ -316,19 +321,19 @@ public void should_get_projects_stats_between_dates() {\n                                     }\n                                   ],\n                                   \"availableBudget\": {\n-                                    \"totalUsdEquivalent\": 60.0,\n+                                    \"totalUsdEquivalent\": 27.50,\n                                     \"totalPerCurrency\": [\n                                       {\n-                                        \"amount\": 120,\n-                                        \"prettyAmount\": 120,\n+                                        \"amount\": 110,\n+                                        \"prettyAmount\": 110,\n                                         \"currency\": {\n                                           \"id\": \"81b7e948-954f-4718-bad3-b70a0edd27e1\",\n                                           \"code\": \"STRK\",\n                                           \"name\": \"StarkNet Token\",\n                                           \"logoUrl\": null,\n                                           \"decimals\": 18\n                                         },\n-                                        \"usdEquivalent\": 60.0,\n+                                        \"usdEquivalent\": 27.50,\n                                         \"usdConversionRate\": null,\n                                         \"ratio\": null\n                                       }\n@@ -416,7 +421,7 @@ public void should_get_projects_stats_between_dates() {\n                                     }\n                                   ],\n                                   \"availableBudget\": {\n-                                    \"totalUsdEquivalent\": 92.5,\n+                                    \"totalUsdEquivalent\": 96.25,\n                                     \"totalPerCurrency\": [\n                                       {\n                                         \"amount\": 25,\n@@ -428,7 +433,7 @@ public void should_get_projects_stats_between_dates() {\n                                           \"logoUrl\": null,\n                                           \"decimals\": 18\n                                         },\n-                                        \"usdEquivalent\": 50,\n+                                        \"usdEquivalent\": 75,\n                                         \"usdConversionRate\": null,\n                                         \"ratio\": null\n                                       },\n@@ -442,13 +447,13 @@ public void should_get_projects_stats_between_dates() {\n                                           \"logoUrl\": null,\n                                           \"decimals\": 18\n                                         },\n-                                        \"usdEquivalent\": 42.5,\n+                                        \"usdEquivalent\": 21.25,\n                                         \"usdConversionRate\": null,\n                                         \"ratio\": null\n                                       }\n                                     ]\n                                   },\n-                                  \"percentUsedBudget\": 0.08,\n+                                  \"percentUsedBudget\": 0.04,\n                                   \"totalGrantedUsdAmount\": {\n                                     \"value\": 100.0,\n                                     \"trend\": \"UP\"\n@@ -611,13 +616,13 @@ public void should_get_projects_stats_with_filters() {\n                     response -> response.getProjects().forEach(project -> assertThat(project.getTotalGrantedUsdAmount().getValue())\n                             .isEqualTo(BigDecimal.valueOf(2000))), true\n             );\n-            test_projects_stats(Map.of(\"availableBudgetUsdAmount.gte\", \"90\", \"availableBudgetUsdAmount.lte\", \"95\"),\n+            test_projects_stats(Map.of(\"availableBudgetUsdAmount.gte\", \"90\", \"availableBudgetUsdAmount.lte\", \"100\"),\n                     response -> response.getProjects().forEach(project -> assertThat(project.getAvailableBudget().getTotalUsdEquivalent())\n-                            .isEqualTo(BigDecimal.valueOf(92.5))), true\n+                            .isEqualTo(BigDecimal.valueOf(96.25))), true\n             );\n-            test_projects_stats(Map.of(\"percentUsedBudget.gte\", \"0.01\"),\n+            test_projects_stats(Map.of(\"percentUsedBudget.gte\", \"0.001\"),\n                     response -> response.getProjects().forEach(project -> assertThat(project.getPercentUsedBudget())\n-                            .isEqualTo(BigDecimal.valueOf(0.08))), true\n+                            .isEqualTo(BigDecimal.valueOf(0.04))), true\n             );\n             test_projects_stats(Map.of(\"totalGrantedUsdAmount.eq\", \"2000\"),\n                     response -> response.getProjects().forEach(project -> assertThat(project.getTotalGrantedUsdAmount().getValue())"
        },
        {
            "sha": "38e41c97f8a69a73e2ed140aa6b60a7c38f873bd",
            "filename": "infrastructure/postgres-adapter/src/main/resources/db/changelog/changelogs/00000351_update_bi_views.sql",
            "status": "modified",
            "additions": 60,
            "deletions": 51,
            "changes": 111,
            "blob_url": "https://github.com/onlydustxyz/marketplace-api/blob/e73b612b92ba879cbb2e95cf6103aff7794ebdcf/infrastructure%2Fpostgres-adapter%2Fsrc%2Fmain%2Fresources%2Fdb%2Fchangelog%2Fchangelogs%2F00000351_update_bi_views.sql",
            "raw_url": "https://github.com/onlydustxyz/marketplace-api/raw/e73b612b92ba879cbb2e95cf6103aff7794ebdcf/infrastructure%2Fpostgres-adapter%2Fsrc%2Fmain%2Fresources%2Fdb%2Fchangelog%2Fchangelogs%2F00000351_update_bi_views.sql",
            "contents_url": "https://api.github.com/repos/onlydustxyz/marketplace-api/contents/infrastructure%2Fpostgres-adapter%2Fsrc%2Fmain%2Fresources%2Fdb%2Fchangelog%2Fchangelogs%2F00000351_update_bi_views.sql?ref=e73b612b92ba879cbb2e95cf6103aff7794ebdcf",
            "patch": "@@ -24,7 +24,11 @@ DROP MATERIALIZED VIEW IF EXISTS bi.contribution_data;\n DROP MATERIALIZED VIEW IF EXISTS bi.reward_data;\n DROP MATERIALIZED VIEW IF EXISTS bi.project_grants_data;\n \n-\n+CREATE FUNCTION accounting.usd_equivalent_at(amount numeric, currency_id UUID, at timestamp with time zone)\n+    RETURNS NUMERIC AS\n+$$\n+SELECT amount * accounting.usd_quote_at(currency_id, at);\n+$$ LANGUAGE SQL;\n \n CREATE MATERIALIZED VIEW bi.contribution_data AS\n WITH project_contributions AS (select distinct on (c.id) c.*,\n@@ -342,56 +346,61 @@ FROM projects p\n                                      join currencies c on c.id = coalesce(rd.currency_id, gd.currency_id)\n                             where rd.project_id = p.id\n                                or gd.project_id = p.id) currencies on true\n-         LEFT JOIN LATERAL ( select gd.project_id                                                                  as project_id,\n-                                    coalesce(sum(gd.usd_amount), 0)                                                as granted_amount_usd,\n-                                    coalesce(sum(rd.usd_amount), 0)                                                as rewarded_amount_usd,\n-                                    sum(coalesce(gd.usd_amount, 0)) - sum(coalesce(rd.usd_amount, 0))              as available_budget_usd,\n-                                    sum(coalesce(rd.usd_amount, 0)) / greatest(sum(coalesce(gd.usd_amount, 0)), 1) as percent_spent_budget_usd,\n-\n-                                    jsonb_agg(jsonb_build_object('currency', gd.currency,\n-                                                                 'amount', gd.amount,\n-                                                                 'usdAmount', gd.usd_amount))                      as granted_amount_per_currency,\n-\n-                                    jsonb_agg(jsonb_build_object('currency', rd.currency,\n-                                                                 'amount', rd.amount,\n-                                                                 'usdAmount', rd.usd_amount))\n-                                    filter ( where rd.currency_id is not null )                                    as rewarded_amount_per_currency,\n-\n-                                    jsonb_agg(jsonb_build_object('currency', gd.currency,\n-                                                                 'amount', coalesce(gd.amount, 0) - coalesce(rd.amount, 0),\n-                                                                 'usdAmount', coalesce(gd.usd_amount, 0) -\n-                                                                              coalesce(rd.usd_amount, 0)))         as available_budget_per_currency,\n-\n-                                    jsonb_agg(jsonb_build_object('currency', gd.currency,\n-                                                                 'amount', coalesce(gd.amount, 0) / coalesce(rd.amount, 1),\n-                                                                 'usdAmount', coalesce(gd.usd_amount, 0) /\n-                                                                              coalesce(rd.usd_amount, 1)))         as percent_spent_budget_per_currency\n-                             from (select gd.project_id                             as project_id,\n-                                          c.id                                      as currency_id,\n-                                          jsonb_build_object('id', c.id,\n-                                                             'code', c.code,\n-                                                             'name', c.name,\n-                                                             'decimals', c.decimals,\n-                                                             'logoUrl', c.logo_url) as currency,\n-                                          sum(gd.usd_amount)                        as usd_amount,\n-                                          sum(gd.amount)                            as amount\n-                                   from bi.project_grants_data gd\n-                                            join currencies c on c.id = gd.currency_id\n-                                   group by gd.project_id, c.id) gd\n-\n-                                      left join (select rd.project_id                             as project_id,\n-                                                        c.id                                      as currency_id,\n-                                                        jsonb_build_object('id', c.id,\n-                                                                           'code', c.code,\n-                                                                           'name', c.name,\n-                                                                           'decimals', c.decimals,\n-                                                                           'logoUrl', c.logo_url) as currency,\n-                                                        sum(rd.usd_amount)                        as usd_amount,\n-                                                        sum(rd.amount)                            as amount\n-                                                 from bi.reward_data rd\n-                                                          join currencies c on c.id = rd.currency_id\n-                                                 group by rd.project_id, c.id) rd on gd.project_id = rd.project_id and gd.currency_id = rd.currency_id\n-                             group by gd.project_id ) budgets on budgets.project_id = p.id\n+         LEFT JOIN LATERAL (select gd.project_id                                                                as project_id,\n+                                   coalesce(sum(gd.current_usd_amount), 0)                                      as granted_amount_usd,   -- sum of all granted amount, using their USD equivalent at the time of the grant\n+                                   coalesce(sum(rd.usd_amount), 0)                                              as rewarded_amount_usd,  -- sum of all rewarded amount, using their USD equivalent at the time of the reward\n+                                   sum(coalesce(gd.current_usd_amount, 0) - coalesce(rd.current_usd_amount, 0)) as available_budget_usd, -- available budget in USD, using the current USD equivalent of each currency\n+\n+                                   sum(coalesce(rd.current_usd_amount, 0)) /\n+                                   greatest(sum(coalesce(gd.current_usd_amount, 0)), 1)                         as percent_spent_budget_usd,\n+\n+                                   jsonb_agg(jsonb_build_object('currency', gd.currency,\n+                                                                'amount', gd.amount,\n+                                                                'usdAmount',\n+                                                                gd.current_usd_amount))                         as granted_amount_per_currency,\n+\n+                                   jsonb_agg(jsonb_build_object('currency', rd.currency,\n+                                                                'amount', rd.amount,\n+                                                                'usdAmount', rd.usd_amount))\n+                                   filter ( where rd.currency_id is not null )                                  as rewarded_amount_per_currency,\n+\n+                                   jsonb_agg(jsonb_build_object('currency', gd.currency,\n+                                                                'amount', coalesce(gd.amount, 0) - coalesce(rd.amount, 0),\n+                                                                'usdAmount',\n+                                                                coalesce(gd.current_usd_amount, 0) -\n+                                                                coalesce(rd.current_usd_amount, 0)))            as available_budget_per_currency,\n+\n+                                   jsonb_agg(jsonb_build_object('currency', gd.currency,\n+                                                                'amount', coalesce(gd.amount, 0) /\n+                                                                          coalesce(rd.amount, 1)))              as percent_spent_budget_per_currency\n+\n+                            from (select gd.project_id                                             as project_id,\n+                                         c.id                                                      as currency_id,\n+                                         jsonb_build_object('id', c.id,\n+                                                            'code', c.code,\n+                                                            'name', c.name,\n+                                                            'decimals', c.decimals,\n+                                                            'logoUrl', c.logo_url)                 as currency,\n+                                         sum(gd.amount)                                            as amount,\n+                                         accounting.usd_equivalent_at(sum(gd.amount), c.id, now()) as current_usd_amount\n+                                  from bi.project_grants_data gd\n+                                           join currencies c on c.id = gd.currency_id\n+                                  group by gd.project_id, c.id) gd\n+\n+                                     left join (select rd.project_id                                             as project_id,\n+                                                       c.id                                                      as currency_id,\n+                                                       jsonb_build_object('id', c.id,\n+                                                                          'code', c.code,\n+                                                                          'name', c.name,\n+                                                                          'decimals', c.decimals,\n+                                                                          'logoUrl', c.logo_url)                 as currency,\n+                                                       sum(rd.usd_amount)                                        as usd_amount,\n+                                                       sum(rd.amount)                                            as amount,\n+                                                       accounting.usd_equivalent_at(sum(rd.amount), c.id, now()) as current_usd_amount\n+                                                from bi.reward_data rd\n+                                                         join currencies c on c.id = rd.currency_id\n+                                                group by rd.project_id, c.id) rd on gd.project_id = rd.project_id and gd.currency_id = rd.currency_id\n+                            group by gd.project_id ) budgets on budgets.project_id = p.id\n GROUP BY p.id;\n \n "
        }
    ]
}