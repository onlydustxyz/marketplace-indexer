openapi: 3.0.3
info:
  title: OnlyDust Indexer API
  description: OnlyDust Indexer API
  version: 1.0.0
servers:
  - url: 'http://localhost:9998'
    description: Local
  - url: 'https://develop-indexer.onlydust.com'
    description: Develop
  - url: 'https://staging-indexer.onlydust.com'
    description: Staging
  - url: 'https://indexer.onlydust.com'
    description: Production

paths:
  /api/v1/events/on-repo-link-changed:
    post:
      security:
        - apiKey: [ ]
      tags:
        - Events
      summary: Notify the indexer upon repo link change
      operationId: onRepoLinkChanged
      description: |
        Notify the indexer upon:
          - New repos have been linked to projects. Contributions will be indexed from these repos.
          - Some repos are no longer linked to any project. Contributions will no longer be indexed from these repos.
      requestBody:
        description: The event payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoLinkChangedEvent'
      responses:
        "204":
          description: 'The repos will be (de-)indexed soon'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events/on-user-changed:
    post:
      security:
        - apiKey: [ ]
      tags:
        - Events
      summary: Notify the indexer upon user profile change
      operationId: onUserChanged
      description: |
        Notify the indexer upon user profile change (login, avatar)
      requestBody:
        description: The event payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChangedEvent'
      responses:
        "204":
          description: 'The users have been refreshed'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/indexes/users/{userId}:
    put:
      security:
        - apiKey: [ ]
      tags:
        - Indexes
      summary: Add user to the list of users to index
      operationId: addUserToIndex
      description: |
        Add user to the list of users to index. Does nothing if the user is already in the list of users to index.
      parameters:
        - in: path
          name: userId
          required: true
          description: The ID of the user to add
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        "204":
          description: 'The user will be indexed soon'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{userId}:
    put:
      security:
        - apiKey: [ ]
      tags:
        - Users
      summary: Immediately indexes the user (if necessary).
      operationId: indexUser
      description: |
        Immediately indexes the user if it is not indexed yet. Does nothing if the user is already indexed.
      parameters:
        - in: header
          name: Authorization
          description: The Bearer github access token
          schema:
            type: string
        - in: path
          name: userId
          required: true
          description: The ID of the user to add
          schema:
            $ref: '#/components/schemas/UserId'
      responses:
        "204":
          description: 'User indexed successfully'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/repos/{repoOwner}/{repoName}/issues/{issueNumber}:
    put:
      security:
        - apiKey: [ ]
      tags:
        - Issues
      summary: Immediately indexes the issue (if necessary).
      operationId: indexIssue
      description: |
        Immediately indexes the issue if it is not indexed yet. Does nothing if the issue is already indexed.
      parameters:
        - in: header
          name: Authorization
          description: The Bearer github access token
          schema:
            type: string
        - in: path
          name: repoOwner
          required: true
          description: The owner of the repo
          example: onlydustxyz
          schema:
            type: string
        - in: path
          name: repoName
          required: true
          description: The name of the repo
          example: marketplace-indexer
          schema:
            type: string
        - in: path
          name: issueNumber
          required: true
          description: The number of the issue to add
          schema:
            $ref: '#/components/schemas/IssueNumber'
      responses:
        "204":
          description: 'Issue indexed successfully'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/v1/repos/{repoOwner}/{repoName}/pull-requests/{pullRequestNumber}:
    put:
      security:
        - apiKey: [ ]
      tags:
        - Pull request
      summary: Immediately indexes the pull request (if necessary).
      operationId: indexPullRequest
      description: |
        Immediately indexes the pull request if it is not indexed yet. Does nothing if the pull request is already indexed.
      parameters:
        - in: header
          name: Authorization
          description: The Bearer github access token
          schema:
            type: string
        - in: path
          name: repoOwner
          required: true
          description: The owner of the repo
          example: onlydustxyz
          schema:
            type: string
        - in: path
          name: repoName
          required: true
          description: The name of the repo
          example: marketplace-indexer
          schema:
            type: string
        - in: path
          name: pullRequestNumber
          required: true
          description: The number of the pull request to add
          schema:
            $ref: '#/components/schemas/PullRequestNumber'
      responses:
        "204":
          description: 'Pull request indexed successfully'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "500":
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Api-Key

  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          example:
            id: c233c52b-8e15-4bb5-8fe5-e64829c71479
            status: 500
            message: INTERNAL SERVER ERROR
          schema:
            $ref: '#/components/schemas/OnlyDustError'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/problem+json:
          example:
            id: c233c52b-8e15-4bb5-8fe5-e64829c71479
            status: 500
            message: UNAUTHORIZED
          schema:
            $ref: '#/components/schemas/OnlyDustError'

  schemas:
    # ERRORS ==================================================================
    OnlyDustError:
      type: object
      description: Error contract strongly inspired by JSON problem (rfc7807) specification
      required:
        - message
        - status
        - id
      properties:
        message:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
          example: Not enough credit.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 400
        id:
          type: string
          format: uuid
          description: The error id
          example: 4f7c660e-6cf1-4424-b240-e630c4c19069

    UserId:
      type: integer
      format: int64
      description: Github user ID (databaseId)
      example: 595505

    RepoId:
      type: integer
      format: int64
      description: Github repo ID (databaseId)
      example: 650626566

    PullRequestId:
      type: string
      format: int64
      description: Github pull request ID (databaseId)
      example: 27218542

    PullRequestNumber:
      type: integer
      format: int64
      description: Github pull request number
      example: 1023

    IssueId:
      type: string
      format: int64
      description: Github issue ID (databaseId)
      example: 1678794252

    IssueNumber:
      type: integer
      format: int64
      description: Github issue number
      example: 27

    AppInstallationId:
      type: integer
      format: int64
      description: Github app installation ID
      example: 9827589

    OrganizationId:
      type: integer
      format: int64
      description: Github organization ID
      example: 1983274

    # EVENTS ==================================================================
    RepoLinkChangedEvent:
      type: object
      properties:
        linkedRepoIds:
          type: array
          items:
            $ref: '#/components/schemas/RepoId'
        unlinkedRepoIds:
          type: array
          items:
            $ref: '#/components/schemas/RepoId'

    UserChangedEvent:
      type: object
      properties:
        userIds:
          type: array
          items:
            $ref: '#/components/schemas/UserId'

    # RESPONSES ================================================================
    RepoListResponse:
      type: object
      properties:
        repos:
          type: array
          items:
            $ref: '#/components/schemas/RepoResponse'

    RepoResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RepoId'
        organizationId:
          $ref: '#/components/schemas/OrganizationId'
        appInstallationId:
          $ref: '#/components/schemas/AppInstallationId'

    AppInstallationListResponse:
      type: object
      properties:
        installations:
          type: array
          items:
            $ref: '#/components/schemas/AppInstallationResponse'

    AppInstallationResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AppInstallationId'
        organizationId:
          $ref: '#/components/schemas/OrganizationId'
        repos:
          type: array
          items:
            $ref: '#/components/schemas/RepoId'